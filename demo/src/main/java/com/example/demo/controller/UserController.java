package com.example.demo.controller;

import com.example.demo.domain.User;
import com.example.demo.dto.UserDTO;
import com.example.demo.repository.UserRepository;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/user")// This means URL's start with /user (after Application path)
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody UserDTO userDTO) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(userDTO.getName());
        n.setEmail(userDTO.getEmail());
        n.setPassword(userDTO.getPassword());
        n.setPhone_number(userDTO.getPhone_number());
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping(path="/login")
    public @ResponseBody String loginUser(@RequestBody UserDTO userDTO, HttpSession session) {
        // Search for the user by email
        User user = userRepository.findByEmail(userDTO.getEmail());

        // Check if user exists and if password matches
        if (user != null && user.getPassword().equals(userDTO.getPassword())) {
            session.setAttribute("userId", user.getAccountId());
            return "Login Successful";
        } else {
            return "Invalid username or password";
        }
    }

    @CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
    @PostMapping(path="/logout")
    public @ResponseBody String logoutUser (HttpSession session)
    {
        session.invalidate();
        return "Logout Successful";
    }
}